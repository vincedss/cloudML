{
  "name": "function",
  "endpoints": [
    {
      "modelType": "CLASSIFICATION",
      "envSelection": {
        "envMode": "INHERIT"
      },
      "code": "\nfrom  dataiku.apinode.predict.predictor import ClassificationPredictor\nimport pandas as pd\nclass MyPredictor(ClassificationPredictor):\n    \"\"\"The class for a classification Custom API node predictor\"\"\"\n\n    def __init__(self, data_folder \u003d None):\n        \"\"\"data_folder is the absolute path to the managed folder storing the data for the model\n        (if any)\"\"\"\n        self.data_folder \u003d data_folder\n\n    def predict(self, features_df):\n        \"\"\"\n        The main prediction method.\n\n        :param: df: a dataframe of 1 or several records to predict\n\n        :return: Either:\n            ``decision_series`` or\n            ``(decision_series, proba_df)`` or\n            ``(decision_series, proba_df, custom_keys_list)``\n\n        decision_series must be a Pandas Series of decisions\n\n        proba_df is optional and must contain one column per class\n\n        custom_keys_list is optional and must contain one entry per input row. Each entry of\n        custom_keys_list must be a Python dictionary. These custom keys will be sent in the\n        output result\n\n        decision_series, proba_df and custom_keys_list must have the same number of rows than df.\n        \"\"\"\n\n        # Note: this sample uses the second form (decision_series, proba_df)\n\n        # Note: this sample \"cheats\" and always returns 5 predictions.\n        # You should actually return 1 prediction per row in the features_df\n\n        print \"Features DataFrame %s\" % features_df\n\n        # predictions, one per record (features_df row)\n        predictions \u003d pd.Series([\"good\", \"fair\", \"poor\", \"good\", \"poor\"])\n\n        # optional probas for each class (may be None or a DataFrame with one column per class)\n        probas \u003d pd.DataFrame({\n            \u0027proba_good\u0027: pd.Series([.9, .6, .2, .7, .2]),\n            \u0027proba_fair\u0027: pd.Series([.2, .7, .3, .3, .3]),\n            \u0027proba_poor\u0027: pd.Series([.2, .6, .6, .3, .9])\n        })\n\n        return (predictions, probas)\n",
      "testQueries": [],
      "enrichMapping": [],
      "healthCheckQueries": [],
      "id": "custom_python_model",
      "type": "CUSTOM_PREDICTION"
    }
  ],
  "publicAccess": true,
  "authRealm": {
    "queryKeys": []
  },
  "tags": [],
  "checklists": {
    "checklists": []
  }
}